<project name="junitgen" basedir="." default="all">
    <target name="init" description="initializes all the variables for the build" >
        <property file="build.properties"/>

        <fail unless="idea.home" message="idea.home property is missing, see build.properties"/>
        <fail unless="Version" message="Version property is missing, see build.properties"/>

        <property name="source.dir" value="."/>
        <property name="jar.file.name" value="junitgen.jar"/>
        <property name="dist.file" location="junitgen-${Version}"/>
        <property name="dist.dir" value="${source.dir}/dist"/>
        <property name="idea.lib" value="${idea.home}/lib"/>

        <filterset id="dirs.filterset">
            <filter token="Version" value="${Version}"/>
        </filterset>

        <path id="class.path">
            <pathelement path="${idea.lib}/openapi.jar"/>
	    <pathelement path="${idea.lib}/extensions.jar"/>
            <pathelement path="${idea.lib}/idea.jar"/>
            <pathelement path="${idea.lib}/velocity.jar"/>
        </path>
    </target>

    <target name="all" depends="clean, compile, deploy" description="executes all the targets in the build file" />

    <target name="compile" depends="init" description="compiles the source" >
        <mkdir dir="classes"/>
        <javac
            srcdir="${source.dir}"
            destdir="${source.dir}/classes"
            deprecation="true"
            debug="true">
            <include name="**/*.java"/>
            <classpath refid="class.path"/>
        </javac>
    </target>

    <target name="deploy" depends="compile" description="creates all the needed distribution files and packages them into zip file." >
        <zip file="${dist.file}-src.zip" basedir="${source.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${source.dir}/classes/META-INF"/>

        <copy todir="${source.dir}/classes/META-INF">
            <fileset dir="${source.dir}/META-INF"/>
            <filterset refid="dirs.filterset"/>
        </copy>

        <jar
            jarfile="${dist.dir}/${jar.file.name}"
            basedir="classes"
            includes="**"
            excludes="**/*build.xml, **/*.vm"/>

        <jar
            jarfile="${dist.dir}/${jar.file.name}"
            basedir="${source.dir}"
            includes="**/*.gif"
            update="true" />


        <mkdir dir="${dist.dir}/resources"/>

        <copy todir="${dist.dir}/resources">
            <fileset dir="." includes="**/junitgen.vm, **/junitgen.properties"/>
        </copy>

        <zip file="${dist.file}.zip" basedir="${dist.dir}"/>
        <delete dir="${dist.dir}" includeemptydirs="yes"/>
    </target>

    <target name="clean" depends="init">
        <delete dir="./classes" includeemptydirs="yes"/>
        <delete file="${dist.file}.zip"/>
        <delete file="${dist.file}-src.zip"/>
    </target>

</project>
