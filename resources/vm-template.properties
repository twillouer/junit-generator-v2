junit.generator.ui.title.vm=Velocity Template
junit.generator.ui.title.properties=Properties
junit.generator.vm.default=\
######################################################################################## \n\
## \n\
## Available variables: \n\
##         $entryList.methodList - List of method composites \n\
##         $entryList.privateMethodList - List of private method composites \n\
##         $entryList.fieldList - ArrayList of class scope field names \n\
##         $entryList.className - class name \n\
##         $entryList.packageName - package name \n\
##         $today - Todays date in MM/dd/yyyy format \n\
## \n\
##            MethodComposite variables: \n\
##                $method.name - Method Name \n\
##                $method.signature - Full method signature in String form \n\
##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) \n\
##                $method.paramNames - List of Strings representing the method's parameters' names \n\
##                $method.paramClasses - List of Strings representing the method's parameters' classes \n\
## \n\
## You can configure the output class name using "testClass" variable below. \n\
## Here are some examples: \n\
## Test${entry.ClassName} - will produce TestSomeClass \n\
## ${entry.className}Test - will produce SomeClassTest \n\
## \n\
######################################################################################## \n\
## \n\
#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end \n\
## Iterate through the list and generate testcase for every entry. \n\
#foreach ($entry in $entryList) \n\
#set( $testClass="${entry.className}Test") \n\
## \n\
package test.$entry.packageName; \n\
 \n\
import junit.framework.Test; \n\
import junit.framework.TestSuite; \n\
import junit.framework.TestCase; \n\
 \n\
/** \n\
 * ${entry.className} Tester. \n\
 * \n\
 * @author <Authors name> \n\
 * @since <pre>$today</pre> \n\
 * @version 1.0 \n\
 */ \n\
public class $testClass extends TestCase { \n\
    public $testClass(String name) { \n\
        super(name); \n\
    } \n\
 \n\
    public void setUp() throws Exception { \n\
        super.setUp(); \n\
    } \n\
 \n\
    public void tearDown() throws Exception { \n\
        super.tearDown(); \n\
    } \n\
 \n\
#foreach($method in $entry.methodList) \n\
    /** \n\
     * \n\
     * Method: $method.signature \n\
     * \n\
     */ \n\
    public void test#cap(${method.name})() throws Exception { \n\
        //TODO: Test goes here... \n\
    } \n\
 \n\
#end \n\
 \n\
#foreach($method in $entry.privateMethodList) \n\
    /** \n\
     * \n\
     * Method: $method.signature \n\
     * \n\
     */ \n\
    public void test#cap(${method.name})() throws Exception { \n\
        //TODO: Test goes here... \n\
    #foreach($string in $method.reflectionCode) \n\
    $string \n\
    #end \n\
    } \n\
 \n\
#end \n\
 \n\
    public static Test suite() { \n\
        return new TestSuite(${testClass}.class); \n\
    } \n\
} \n\
#end
junit.generator.ui.title.combinegetterandsetter=Combine Getter and Setter
junit.generator.ui.title.generateforoverloaded=Generate for Overloaded Methods
junit.generator.file.exists=File already exists. Do you want to see the difference between the old and the new test cases?\n\
  By answering 'No' you will overwrite an existing file.
junit.generator.ui.outputPath=Output Pattern definition file. \\ Available variables\:\\      $SOURCEPATH$ - location where source code for current project resides\\      $PACKAGE$ - package path where TestedClass resides\\      $FILENAME$ - Filename of the testClass. Note\: if you modify filename only\\      the file name will be affected not a class name\\ \\ Anything before $SOURCEPATH$ will be ignored. If you need to go outside of the\\ sourcepath use $SOURCEPATH$/../\\   \\ Developers using maven should probably use $SOURCEPATH$/../../test/mai\n\ \\ For project specific configuration you can add separate line for every project.\\ Earch line must start with project name. i.e\\ junitgen\=$SOURCEPATH$/testing/$PACKAGE$/$FILENAME$\\ If project specific configuration does not exist, the following line will be used.
junit.generator.ui.outputPath.label=Output Path\:
junit.generator.outputPath=${SOURCEPATH}/test/${PACKAGE}/${FILENAME}
junit.generator.ui.generateStyle.label=Method Generation Style\: