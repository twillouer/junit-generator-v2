junit.generator.ui.title.vm=Velocity Template
junit.generator.ui.title.properties=Properties
junit.generator.vm.names=JUnit 3,JUnit 4
junit.generator.vm.1=\
######################################################################################## \n\
## \n\
## Available variables: \n\
##         $entryList.methodList - List of method composites \n\
##         $entryList.privateMethodList - List of private method composites \n\
##         $entryList.fieldList - ArrayList of class scope field names \n\
##         $entryList.className - class name \n\
##         $entryList.packageName - package name \n\
##         $today - Today date in MM/dd/yyyy format \n\
## \n\
##            MethodComposite variables: \n\
##                $method.name - Method Name \n\
##                $method.signature - Full method signature in String form \n\
##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) \n\
##                $method.paramNames - List of Strings representing the method's parameters' names \n\
##                $method.paramClasses - List of Strings representing the method's parameters' classes \n\
## \n\
## You can configure the output class name using "testClass" variable below. \n\
## Here are some examples: \n\
## Test${entry.ClassName} - will produce TestSomeClass \n\
## ${entry.className}Test - will produce SomeClassTest \n\
## \n\
######################################################################################## \n\
## \n\
#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end \n\
## Iterate through the list and generate testcase for every entry. \n\
#foreach ($entry in $entryList) \n\
#set( $testClass="${entry.className}Test") \n\
## \n\
package test.$entry.packageName; \n\
 \n\
import junit.framework.Test; \n\
import junit.framework.TestSuite; \n\
import junit.framework.TestCase; \n\
 \n\
/** \n\
 * ${entry.className} Tester. \n\
 * \n\
 * @author <Authors name> \n\
 * @since <pre>$today</pre> \n\
 * @version 1.0 \n\
 */ \n\
public class $testClass extends TestCase { \n\
    public $testClass(String name) { \n\
        super(name); \n\
    } \n\
 \n\
    public void setUp() throws Exception { \n\
        super.setUp(); \n\
    } \n\
 \n\
    public void tearDown() throws Exception { \n\
        super.tearDown(); \n\
    } \n\
 \n\
#foreach($method in $entry.methodList) \n\
    /** \n\
     * \n\
     * Method: $method.signature \n\
     * \n\
     */ \n\
    public void test#cap(${method.name})() throws Exception { \n\
        //TODO: Test goes here... \n\
    } \n\
 \n\
#end \n\
 \n\
#foreach($method in $entry.privateMethodList) \n\
    /** \n\
     * \n\
     * Method: $method.signature \n\
     * \n\
     */ \n\
    public void test#cap(${method.name})() throws Exception { \n\
        //TODO: Test goes here... \n\
    #foreach($string in $method.reflectionCode) \n\
    $string \n\
    #end \n\
    } \n\
 \n\
#end \n\
 \n\
    public static Test suite() { \n\
        return new TestSuite(${testClass}.class); \n\
    } \n\
} \n\
#end
junit.generator.vm.2=\
######################################################################################## \n\
## \n\
## Available variables: \n\
##         $entryList.methodList - List of method composites \n\
##         $entryList.privateMethodList - List of private method composites \n\
##         $entryList.fieldList - ArrayList of class scope field names \n\
##         $entryList.className - class name \n\
##         $entryList.packageName - package name \n\
##         $today - Today date in MM/dd/yyyy format \n\
## \n\
##            MethodComposite variables: \n\
##                $method.name - Method Name \n\
##                $method.signature - Full method signature in String form \n\
##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) \n\
##                $method.paramNames - List of Strings representing the method's parameters' names \n\
##                $method.paramClasses - List of Strings representing the method's parameters' classes \n\
## \n\
## You can configure the output class name using "testClass" variable below. \n\
## Here are some examples: \n\
## Test${entry.ClassName} - will produce TestSomeClass \n\
## ${entry.className}Test - will produce SomeClassTest \n\
## \n\
######################################################################################## \n\
## \n\
#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end \n\
## Iterate through the list and generate testcase for every entry. \n\
#foreach ($entry in $entryList) \n\
#set( $testClass="${entry.className}Test") \n\
## \n\
package test.$entry.packageName; \n\
 \n\
import org.junit.Test; \n\
import org.junit.Before; \n\
import org.junit.After; \n\
 \n\
/** \n\
 * ${entry.className} Tester. \n\
 * \n\
 * @author <Authors name> \n\
 * @since <pre>$date</pre> \n\
 * @version 1.0 \n\
 */ \n\
public class $testClass { \n\
 \n\
    @Before\n\
    public void before() throws Exception { \n\
    } \n\
 \n\
    @After\n\
    public void after() throws Exception { \n\
    } \n\
 \n\
#foreach($method in $entry.methodList) \n\
    /** \n\
     * \n\
     * Method: $method.signature \n\
     * \n\
     */ \n\
    @Test\n\
    public void test#cap(${method.name})() throws Exception { \n\
        //TODO: Test goes here... \n\
    } \n\
 \n\
#end \n\
 \n\
#foreach($method in $entry.privateMethodList) \n\
    /** \n\
     * \n\
     * Method: $method.signature \n\
     * \n\
     */ \n\
    @Test\n\
    public void test#cap(${method.name})() throws Exception { \n\
        //TODO: Test goes here... \n\
    #foreach($string in $method.reflectionCode) \n\
    $string \n\
    #end \n\
    } \n\
 \n\
#end \n\
} \n\
#end
junit.generator.ui.title.combinegetterandsetter=Combine Getter and Setter
junit.generator.ui.title.generateforoverloaded=Generate for Overloaded Methods
junit.generator.file.exists=File already exists. Do you want to see the difference between the old and the new test cases?\n\
  By answering 'No' you will overwrite an existing file.
junit.generator.error.title=Error
junit.generator.error.noselectedtemplate=There does not appear to be a valid template. Is one configured? Check the settings.
junit.generator.ui.outputPath=Output Pattern definition file. \\ Available variables\:\\      $SOURCEPATH$ - location where source code for current project resides\\      $PACKAGE$ - package path where TestedClass resides\\      $FILENAME$ - Filename of the testClass. Note\: if you modify filename only\\      the file name will be affected not a class name\\ \\ Anything before $SOURCEPATH$ will be ignored. If you need to go outside of the\\ sourcepath use $SOURCEPATH$/../\\   \\ Developers using maven should probably use $SOURCEPATH$/../../test/mai\n\ \\ For project specific configuration you can add separate line for every project.\\ Earch line must start with project name. i.e\\ junitgen\=$SOURCEPATH$/testing/$PACKAGE$/$FILENAME$\\ If project specific configuration does not exist, the following line will be used.
junit.generator.ui.outputPath.label=Output Path\:
junit.generator.outputPath=${SOURCEPATH}/../../test/java/${PACKAGE}/${FILENAME}
junit.generator.ui.generateStyle.label=Method Generation Style\:
junit.generator.ui.diff.titles=Generated Test,Merge Result,Existing Test
junit.generator.ui.diff.window.title=Generated JUnit Merge
junit.generator.ui.selectedvm.label=Default Template\:
assertj.generator.vm.names=AssertJ ClassTemplate,AssertJ has,AssertJ Element Iterable,AssertJ Element Array,AssertJ Element is,AssertJ hasPrimitive
assertj.generator.vm.1=${package_full}\n\
                     \n\
                     import org.assertj.core.api.AbstractAssert;\n\
                     // Assertions is needed if an assertion for Iterable is generated\n\
                     import org.assertj.core.api.Assertions;\n\
                     ${imports}\n\
                     \n\
                     /**\n\
                      * {@link ${class_to_assert}} specific assertions - Generated by CustomAssertionGenerator.\n\
                      */\n\
                     public class ${class_to_assert}Assert extends AbstractAssert<${class_to_assert}Assert, ${class_to_assert}> {\n\
                     \n\
                       /**\n\
                        * Creates a new </code>{@link ${class_to_assert}Assert}</code> to make assertions on actual ${class_to_assert}.\n\
                        * @param actual the ${class_to_assert} we want to make assertions on.\n\
                        */\n\
                       public ${class_to_assert}Assert(${class_to_assert} actual) {\n\
                         super(actual, ${class_to_assert}Assert.class);\n\
                       }\n\
                     \n\
                       /**\n\
                        * An entry point for ${class_to_assert}Assert to follow AssertJ standard <code>assertThat()</code> statements.<br>\n\
                        * With a static import, one's can write directly : <code>assertThat(my${class_to_assert})</code> and get specific assertion with code completion.\n\
                        * @param actual the ${class_to_assert} we want to make assertions on.\n\
                        * @return a new </code>{@link ${class_to_assert}Assert}</code>\n\
                        */\n\
                       public static ${class_to_assert}Assert assertThat(${class_to_assert} actual) {\n\
                         return new ${class_to_assert}Assert(actual);\n\
                       }\n
assertj.generator.vm.2=\n\
                       /**\n\
                        * Verifies that the actual ${class_to_assert}'s ${property} is equal to the given one.\n\
                        * @param ${property} the given ${property} to compare the actual ${class_to_assert}'s ${property} to.\n\
                        * @return this assertion object.\n\
                        * @throws AssertionError - if the actual ${class_to_assert}'s ${property} is not equal to the given one.\n\
                        */\n\
                       public ${class_to_assert}Assert has${Property}(${propertyType} ${property}) {\n\
                         // check that actual ${class_to_assert} we want to make assertions on is not null.\n\
                         isNotNull();\n\
                     \n\
                         // we overrides the default error message with a more explicit one\n\
                         String errorMessage = "\\nExpected ${property} of:\\n  <%s>\\nto be:\\n  <%s>\\n but was:\\n  <%s>";\n\
                         \n\
                         // check\n\
                         if (!actual.get${Property}().equals(${property})) { \n\
                           failWithMessage(errorMessage, actual, ${property}, actual.get${Property}()); \n\
                         }\n\
                     \n\
                         // return the current assertion for method chaining\n\
                         return this;\n\
                       }\n
assertj.generator.vm.3=\n\
                       /**\n\
                        * Verifies that the actual ${class_to_assert}'s ${property} contains the given ${elementType} elements.\n\
                        * @param ${property} the given elements that should be contained in actual ${class_to_assert}'s ${property}.\n\
                        * @return this assertion object.\n\
                        * @throws AssertionError if the actual ${class_to_assert}'s ${property} does not contain all given ${elementType} elements.\n\
                        */\n\
                       public ${class_to_assert}Assert has${Property}(${elementType}... ${property}) {  \n\
                         // check that actual ${class_to_assert} we want to make assertions on is not null.\n\
                         isNotNull();\n\
                     \n\
                         // check that given ${elementType} varargs is not null.\n\
                         if (${property} == null) throw new AssertionError("Expecting ${property} parameter not to be null.");\n\
                         \n\
                         // check with standard error message (see commented below to set your own message).\n\
                         Assertions.assertThat(actual.get${Property}()).contains(${property});\n\
                     \n\
                         // To override the standard error message :\n\
                         // - remove the previous call to Assertions.assertThat(actual.get${Property}().contains(${property})\n\
                         // - uncomment the line below and set your error message:\n\
                         // Assertions.assertThat(actual.get${Property}()).overridingErrorMessage("\\nmy error message %s", "arg1").contains(${property});\n\
                     \n\
                         // return the current assertion for method chaining\n\
                         return this;\n\
                       }\n\
                     \n\
                       /**\n\
                        * Verifies that the actual ${class_to_assert} has no ${property}.\n\
                        * @return this assertion object.\n\
                        * @throws AssertionError if the actual ${class_to_assert}'s ${property} is not empty.\n\
                        */\n\
                       public ${class_to_assert}Assert hasNo${Property}() {  \n\
                         // check that actual ${class_to_assert} we want to make assertions on is not null.\n\
                         isNotNull();\n\
                     \n\
                         // we override the default error message with a more explicit one\n\
                         String errorMessage = "\\nExpected :\\n  <%s>\\nnot to have ${property} but had :\\n  <%s>";\n\
                         \n\
                         // check\n\
                         if (!actual.get${Property}().isEmpty()) { \n\
                           failWithMessage(errorMessage, actual, actual.get${Property}());\n\
                         }\n\
                         \n\
                         // return the current assertion for method chaining\n\
                         return this;\n\
                       }\n\
                       \n
assertj.generator.vm.4=\n\
                       /**\n\
                        * Verifies that the actual ${class_to_assert}'s ${property} contains the given ${elementType} elements.\n\
                        * @param ${property} the given elements that should be contained in actual ${class_to_assert}'s ${property}.\n\
                        * @return this assertion object.\n\
                        * @throws AssertionError if the actual ${class_to_assert}'s ${property} does not contain all given ${elementType} elements.\n\
                        */\n\
                       public ${class_to_assert}Assert has${Property}(${elementType}... ${property}) {  \n\
                         // check that actual ${class_to_assert} we want to make assertions on is not null.\n\
                         isNotNull();\n\
                     \n\
                         // check that given ${elementType} varargs is not null.\n\
                         if (${property} == null) throw new AssertionError("Expecting ${property} parameter not to be null.");\n\
                         \n\
                         // check with standard error message (see commented below to set your own message).\n\
                         Assertions.assertThat(actual.get${Property}()).contains(${property});\n\
                     \n\
                         // To override the standard error message :\n\
                         // - remove the previous call to Assertions.assertThat(actual.get${Property}().contains(${property})\n\
                         // - uncomment the line below and set your error message:\n\
                         // Assertions.assertThat(actual.get${Property}()).overridingErrorMessage("\\nmy error message %s", "arg1").contains(${property});\n\
                         \n\
                         // return the current assertion for method chaining\n\
                         return this;\n\
                       }\n\
                     \n\
                       /**\n\
                        * Verifies that the actual ${class_to_assert} has no ${property}.\n\
                        * @return this assertion object.\n\
                        * @throws AssertionError if the actual ${class_to_assert}'s ${property} is not empty.\n\
                        */\n\
                       public ${class_to_assert}Assert hasNo${Property}() {  \n\
                         // check that actual ${class_to_assert} we want to make assertions on is not null.\n\
                         isNotNull();\n\
                     \n\
                         // we override the default error message with a more explicit one\n\
                         String errorMessage = "\\nExpected :\\n  <%s>\\nnot to have ${property} but had :\\n  <%s>";\n\
                         \n\
                         // check\n\
                         if (actual.get${Property}().length > 0)  { \n\
                           failWithMessage(errorMessage, actual, java.util.Arrays.toString(actual.get${Property}()));\n\
                         }\n\
                         \n\
                         // return the current assertion for method chaining\n\
                         return this;\n\
                       }\n\
                       \n
assertj.generator.vm.5=\n\
                       /**\n\
                        * Verifies that the actual ${class_to_assert} is ${property}.\n\
                        * @return this assertion object.\n\
                        * @throws AssertionError - if the actual ${class_to_assert} is not ${property}.\n\
                        */\n\
                       public ${class_to_assert}Assert is${Property}() {\n\
                         // check that actual ${class_to_assert} we want to make assertions on is not null.\n\
                         isNotNull();\n\
                     \n\
                         // check\n\
                         if (!actual.is${Property}()) { \n\
                           failWithMessage("\\nExpected actual ${class_to_assert} to be ${property} but was not."); \n\
                         }\n\
                         \n\
                         // return the current assertion for method chaining\n\
                         return this;\n\
                       }\n\
                     \n\
                       /**\n\
                        * Verifies that the actual ${class_to_assert} is not ${property}.\n\
                        * @return this assertion object.\n\
                        * @throws AssertionError - if the actual ${class_to_assert} is ${property}.\n\
                        */\n\
                       public ${class_to_assert}Assert isNot${Property}() {\n\
                         // check that actual ${class_to_assert} we want to make assertions on is not null.\n\
                         isNotNull();\n\
                     \n\
                         // check\n\
                         if (actual.is${Property}()) { \n\
                           failWithMessage("\\nExpected actual ${class_to_assert} not to be ${property} but was.");\n\
                         }\n\
                         \n\
                         // return the current assertion for method chaining\n\
                         return this;\n\
                       }\n
assertj.generator.vm.6=\n\
                      /**\n\
                        * Verifies that the actual ${class_to_assert}'s ${property} is equal to the given one.\n\
                        * @param ${property} the given ${property} to compare the actual ${class_to_assert}'s ${property} to.\n\
                        * @return this assertion object.\n\
                        * @throws AssertionError - if the actual ${class_to_assert}'s ${property} is not equal to the given one.${throws_javadoc}\n\
                        */\n\
                       public ${class_to_assert}Assert has${Property}(${propertyType} ${property}) ${throws}{\n\
                         // check that actual ${class_to_assert} we want to make assertions on is not null.\n\
                         isNotNull();\n\
                         \n\
                         // overrides the default error message with a more explicit one\n\
                         String errorMessage = "\nExpected ${property} of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";\n\
                         \n\
                         // check\n\
                         ${propertyType} actual${Property} = actual.get${Property}();\n\
                         if (actual${Property} != ${property}) {\n\
                           failWithMessage(errorMessage, actual, ${property}, actual${Property});\n\
                         }\n\
                         \n\
                         // return the current assertion for method chaining\n\
                         return this;\n\
                       }\n
